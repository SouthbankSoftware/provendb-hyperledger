// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hyperledger.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmbedDataRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmbedDataRequest) Reset()         { *m = EmbedDataRequest{} }
func (m *EmbedDataRequest) String() string { return proto.CompactTextString(m) }
func (*EmbedDataRequest) ProtoMessage()    {}
func (*EmbedDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyperledger_1bbc4baa91da98d5, []int{0}
}
func (m *EmbedDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmbedDataRequest.Unmarshal(m, b)
}
func (m *EmbedDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmbedDataRequest.Marshal(b, m, deterministic)
}
func (dst *EmbedDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbedDataRequest.Merge(dst, src)
}
func (m *EmbedDataRequest) XXX_Size() int {
	return xxx_messageInfo_EmbedDataRequest.Size(m)
}
func (m *EmbedDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbedDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmbedDataRequest proto.InternalMessageInfo

func (m *EmbedDataRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type EmbedDataReply struct {
	TxnId                string               `protobuf:"bytes,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	BlockNumber          uint64               `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EmbedDataReply) Reset()         { *m = EmbedDataReply{} }
func (m *EmbedDataReply) String() string { return proto.CompactTextString(m) }
func (*EmbedDataReply) ProtoMessage()    {}
func (*EmbedDataReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyperledger_1bbc4baa91da98d5, []int{1}
}
func (m *EmbedDataReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmbedDataReply.Unmarshal(m, b)
}
func (m *EmbedDataReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmbedDataReply.Marshal(b, m, deterministic)
}
func (dst *EmbedDataReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbedDataReply.Merge(dst, src)
}
func (m *EmbedDataReply) XXX_Size() int {
	return xxx_messageInfo_EmbedDataReply.Size(m)
}
func (m *EmbedDataReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbedDataReply.DiscardUnknown(m)
}

var xxx_messageInfo_EmbedDataReply proto.InternalMessageInfo

func (m *EmbedDataReply) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *EmbedDataReply) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *EmbedDataReply) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type GetTransactionByIDRequest struct {
	TxnId                string   `protobuf:"bytes,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionByIDRequest) Reset()         { *m = GetTransactionByIDRequest{} }
func (m *GetTransactionByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByIDRequest) ProtoMessage()    {}
func (*GetTransactionByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyperledger_1bbc4baa91da98d5, []int{2}
}
func (m *GetTransactionByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionByIDRequest.Unmarshal(m, b)
}
func (m *GetTransactionByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionByIDRequest.Marshal(b, m, deterministic)
}
func (dst *GetTransactionByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByIDRequest.Merge(dst, src)
}
func (m *GetTransactionByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionByIDRequest.Size(m)
}
func (m *GetTransactionByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByIDRequest proto.InternalMessageInfo

func (m *GetTransactionByIDRequest) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

type Transaction struct {
	TxnId                string               `protobuf:"bytes,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	BlockNumber          uint64               `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Data                 string               `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyperledger_1bbc4baa91da98d5, []int{3}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTxnId() string {
	if m != nil {
		return m.TxnId
	}
	return ""
}

func (m *Transaction) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Transaction) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Transaction) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*EmbedDataRequest)(nil), "hyperledger.EmbedDataRequest")
	proto.RegisterType((*EmbedDataReply)(nil), "hyperledger.EmbedDataReply")
	proto.RegisterType((*GetTransactionByIDRequest)(nil), "hyperledger.GetTransactionByIDRequest")
	proto.RegisterType((*Transaction)(nil), "hyperledger.Transaction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HyperledgerServiceClient is the client API for HyperledgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HyperledgerServiceClient interface {
	EmbedData(ctx context.Context, in *EmbedDataRequest, opts ...grpc.CallOption) (*EmbedDataReply, error)
	GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type hyperledgerServiceClient struct {
	cc *grpc.ClientConn
}

func NewHyperledgerServiceClient(cc *grpc.ClientConn) HyperledgerServiceClient {
	return &hyperledgerServiceClient{cc}
}

func (c *hyperledgerServiceClient) EmbedData(ctx context.Context, in *EmbedDataRequest, opts ...grpc.CallOption) (*EmbedDataReply, error) {
	out := new(EmbedDataReply)
	err := c.cc.Invoke(ctx, "/hyperledger.HyperledgerService/EmbedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperledgerServiceClient) GetTransactionByID(ctx context.Context, in *GetTransactionByIDRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/hyperledger.HyperledgerService/GetTransactionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperledgerServiceServer is the server API for HyperledgerService service.
type HyperledgerServiceServer interface {
	EmbedData(context.Context, *EmbedDataRequest) (*EmbedDataReply, error)
	GetTransactionByID(context.Context, *GetTransactionByIDRequest) (*Transaction, error)
}

func RegisterHyperledgerServiceServer(s *grpc.Server, srv HyperledgerServiceServer) {
	s.RegisterService(&_HyperledgerService_serviceDesc, srv)
}

func _HyperledgerService_EmbedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperledgerServiceServer).EmbedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperledger.HyperledgerService/EmbedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperledgerServiceServer).EmbedData(ctx, req.(*EmbedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperledgerService_GetTransactionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperledgerServiceServer).GetTransactionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperledger.HyperledgerService/GetTransactionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperledgerServiceServer).GetTransactionByID(ctx, req.(*GetTransactionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HyperledgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hyperledger.HyperledgerService",
	HandlerType: (*HyperledgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmbedData",
			Handler:    _HyperledgerService_EmbedData_Handler,
		},
		{
			MethodName: "GetTransactionByID",
			Handler:    _HyperledgerService_GetTransactionByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyperledger.proto",
}

func init() { proto.RegisterFile("hyperledger.proto", fileDescriptor_hyperledger_1bbc4baa91da98d5) }

var fileDescriptor_hyperledger_1bbc4baa91da98d5 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xcf, 0x4e, 0xf2, 0x40,
	0x14, 0xc5, 0x19, 0xfe, 0x25, 0xdc, 0x7e, 0xf9, 0x82, 0x37, 0x31, 0xa9, 0x35, 0x2a, 0x76, 0x41,
	0x58, 0x95, 0x04, 0x97, 0xae, 0x24, 0x18, 0x65, 0x63, 0x48, 0x21, 0xc6, 0xb8, 0x21, 0xd3, 0xf6,
	0x8a, 0x8d, 0x6d, 0xa7, 0x0e, 0x03, 0xa1, 0x4f, 0xe0, 0x2b, 0xb8, 0xf6, 0x2d, 0x7c, 0x3b, 0xd3,
	0x22, 0x50, 0x44, 0xd6, 0xee, 0xda, 0x73, 0xcf, 0xcd, 0x9c, 0xf9, 0x9d, 0x81, 0x83, 0xe7, 0x24,
	0x26, 0x19, 0x90, 0x37, 0x21, 0x69, 0xc5, 0x52, 0x28, 0x81, 0x5a, 0x4e, 0x32, 0xce, 0x26, 0x42,
	0x4c, 0x02, 0x6a, 0x67, 0x23, 0x67, 0xf6, 0xd4, 0x56, 0x7e, 0x48, 0x53, 0xc5, 0xc3, 0x78, 0xe9,
	0x36, 0x9b, 0x50, 0xbf, 0x0e, 0x1d, 0xf2, 0x7a, 0x5c, 0x71, 0x9b, 0x5e, 0x67, 0x34, 0x55, 0x88,
	0x50, 0xf6, 0xb8, 0xe2, 0x3a, 0x6b, 0xb0, 0x56, 0xcd, 0xce, 0xbe, 0xcd, 0x37, 0x06, 0xff, 0x73,
	0xc6, 0x38, 0x48, 0xf0, 0x10, 0xaa, 0x6a, 0x11, 0x8d, 0x7d, 0xef, 0xdb, 0x58, 0x51, 0x8b, 0xa8,
	0xef, 0xe1, 0x25, 0x68, 0xae, 0x24, 0xae, 0x68, 0x9c, 0x9e, 0xa5, 0x17, 0x1b, 0xac, 0xa5, 0x75,
	0x0c, 0x6b, 0x19, 0xc4, 0x5a, 0x05, 0xb1, 0x46, 0xab, 0x20, 0x36, 0x2c, 0xed, 0xa9, 0x80, 0xe7,
	0xf0, 0xcf, 0x09, 0x84, 0xfb, 0x32, 0x8e, 0x66, 0xa1, 0x43, 0x52, 0x2f, 0x35, 0x58, 0xab, 0x6c,
	0x6b, 0x99, 0x76, 0x97, 0x49, 0x66, 0x07, 0x8e, 0x6e, 0x48, 0x8d, 0x24, 0x8f, 0xa6, 0xdc, 0x55,
	0xbe, 0x88, 0xba, 0x49, 0xbf, 0xb7, 0x8a, 0xfe, 0x7b, 0x26, 0xf3, 0x9d, 0x81, 0x96, 0xdb, 0xf8,
	0xa3, 0xe8, 0x6b, 0xb0, 0xe5, 0x0d, 0xd8, 0xce, 0x27, 0x03, 0xbc, 0xdd, 0x34, 0x36, 0x24, 0x39,
	0xf7, 0x5d, 0xc2, 0x3e, 0xd4, 0xd6, 0xb8, 0xf1, 0xc4, 0xca, 0xd7, 0xfc, 0xb3, 0x2f, 0xe3, 0x78,
	0xdf, 0x38, 0x0e, 0x12, 0xb3, 0x80, 0x0f, 0x80, 0xbb, 0xc0, 0xb0, 0xb9, 0xb5, 0xb4, 0x97, 0xa8,
	0xa1, 0x6f, 0xf9, 0x72, 0x26, 0xb3, 0xd0, 0xbd, 0x82, 0x53, 0x57, 0x84, 0x29, 0x98, 0x39, 0x45,
	0x9e, 0x63, 0xed, 0x3c, 0xc6, 0x6e, 0x3d, 0x77, 0xb5, 0x41, 0xaa, 0x0c, 0xd8, 0x63, 0x25, 0x1b,
	0x7d, 0x14, 0x4b, 0xc3, 0xc1, 0xbd, 0x53, 0xcd, 0x7e, 0x2e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x05, 0x30, 0x7f, 0xe0, 0xc9, 0x02, 0x00, 0x00,
}
